import { NextResponse } from "next/server";

//–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –ø–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ—Ä–∑–∏–Ω—ã –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

export async function POST(req) {
  try {
    const { email, name, cart } = await req.json();

    if (!email || !name || cart.length === 0) {
      return NextResponse.json(
        { message: "–û—à–∏–±–∫–∞! –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ." },
        { status: 400 }
      );
    }

    const message = `
üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –º–∞–≥–∞–∑–∏–Ω–µ*  
üë§ *–ò–º—è:* ${name}  
üìß *–ü–æ—á—Ç–∞:* ${email}  

üõç *–¢–æ–≤–∞—Ä—ã:*  
${cart
  .map(
    (item, i) =>
      `${i + 1}. ${item.title.replace(/[*_~`]/g, "")} x${item.quantity} - ${
        item.price
      } ‚ÇΩ`
  )
  .join("\n")}

üí∞ *–ò—Ç–æ–≥–æ:* ${cart.reduce((acc, item) => acc + item.price * item.quantity, 0)} ‚ÇΩ
    `;

    const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

    if (!TOKEN || !CHAT_ID) {
      console.error("–û—à–∏–±–∫–∞: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç!");
      return NextResponse.json(
        { message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞." },
        { status: 500 }
      );
    }

    const telegramResponse = await fetch(
      `https://api.telegram.org/bot${TOKEN}/sendMessage`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: message,
          parse_mode: "Markdown",
        }),
      }
    );

    const responseData = await telegramResponse.json();

    if (!telegramResponse.ok) {
      console.error("–û—à–∏–±–∫–∞ Telegram API:", responseData);
      return NextResponse.json(
        { message: "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram", error: responseData },
        { status: 500 }
      );
    }

    console.log("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç Telegram:", responseData);
    return NextResponse.json({ message: "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!" });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error);
    return NextResponse.json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞." }, { status: 500 });
  }
}
